#!/usr/bin/env python3
# This line is needed to ensure that the code will be able to be run with Python 3

# Taghi Mammadov Lab 2 usermgmt part

# This is the code for authentication using passwords tool, it will mainly use 4 functions: add, change, force, delete

import sys # For read command-line arguments
import bcrypt # Used for hashing passwords. It mainly provides a secure way to store and verify passwords
import json # For reading from and writing to the password storage file

user_database = 'user_db.json'  # So I just created here the file for the database of users, in this file will all the data be stored

def load_user_db(): # First the function that will store the data that we put
    try:
        with open(user_database, 'r') as f: # Opens the file that I just created above to read the data in it, r for read and f for file object
            return json.load(f) # This part of the code reads the entire file through the file object f
    except FileNotFoundError: # If there is some error we will have to return just empty dictionary
        return {}

def save_user_db(user_db): # This is the function for savin the users that I input, for this the file again opens and I store data there
    with open(user_database, 'w') as f: # This part is for writing into the file
        json.dump(user_db, f, indent=4) # Each username part will be with spaces of 4

def add_user(username, password): # This is the fist function with two parameters username and password
    user_db = load_user_db() # So it is just the value that I equalled to load_user_db()
    if username in user_db: # for checking if the Username already there
        print(f'User {username} already exists.')
        return
    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())  # bcrypt.hashpw() takes the password encoded in UTF-8 format and a salt generated by bcrypt.gensalt()
    # Salt function is needed so that identical passwords do not generate the same key
    user_db[username] = {'password': hashed_password.decode('utf-8'), 'forcepass': False}  # Adds the new user to the database dictionary
    # The username is used here as a key. This all includes the hashed password and a flag (`forcepass`) indicating whether the user must change the password at the next login
    save_user_db(user_db) # Saves the modified dictionary
    print(f'User {username} successfully added.') # Final message

def change_password(username, new_password): # This is the second fucntion for changing the password
    user_db = load_user_db() # Again we do the same
    if username not in user_db: # First we check if the username that wants to change the password actually exists
        print(f'User {username} does not exist.')
        return # and if the username does not exist it will just return and write error message
    hashed_change = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())  # Again the password is being changed with the usage of utf 8
    user_db[username]['password'] = hashed_change.decode('utf-8') # Adn we decode the given password
    save_user_db(user_db) # Saves it all
    print('Password change successful.') # Final message

def force_password_change(username): # Force password function
    user_db = load_user_db()
    if username not in user_db:
        print(f'User {username} does not exist.')
        return
    user_db[username]['forcepass'] = True # The flag is changed to true mainly 1 and all the functions before that had False will not go
    save_user_db(user_db)
    print('User will be requested to change password on next login.') # The message needed

def delete_user(username): # Delete fucntion, deletes the username with the password from the dictionary
    user_db = load_user_db()
    if username not in user_db:
        print(f'User {username} does not exist.')
        return
    del user_db[username]
    save_user_db(user_db)
    print(f'User {username} successfully removed.')

def main(): # The main function that will use all parts of the code
    if len(sys.argv) < 3: # if the length of the arguments is less than 2 it will say to put one of the commands
        print('Please insert add, passwd, forcepass, or del commands.')
        return # And exits
    operation = sys.argv[1] # Indicator that operation should be of one argument
    username = sys.argv[2] # And the username of 2

    user_db = load_user_db() # I have loaded here the database so if the username does not match it immediately writes that it already exists

    if operation == 'add': # For operation add
        if operation == 'add' and username in user_db:
            print(f'User {username} already exists.')
            return
        password = input('Password: ')
        repeat_password = input('Repeat Password: ')
        if password == repeat_password: # Check is the password are correct
            add_user(username, password) # Add user function works
        else:
            print('User add failed. Password mismatch.') # Is something went wrong it will just print the error message

    elif operation == 'passwd': # Change of the password function
        new_password = input('New Password: ')
        repeat_password = input('Repeat New Password: ')
        if new_password == repeat_password: # If passwords match it changes if not then error message
            change_password(username, new_password)
        else:
            print('Password change failed. Password mismatch.')

    elif operation == 'forcepass':
        force_password_change(username)
    elif operation == 'del':
        delete_user(username)
    else:
        print('Invalid operation.')  # two other functions and if no operation seen then invalid message

if __name__ == '__main__':
    main() # The starting part of the code which starts the main function
